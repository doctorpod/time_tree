#!/usr/bin/env ruby
$:.unshift File.expand_path(File.join('..', '..', 'lib'), __FILE__)
require 'time_log'
require 'optparse'

module TimeLog
  options = {:today => true}
  
  option_parser = OptionParser.new do |opts|
    opts.banner = "Usage: #{File.basename($0)} [options] [data_path]"
    
    opts.on('-t', '--today') do
      options[:today] = true
    end
    
    opts.on('-y', '--yesterday') do
      options[:yesterday] = true
    end
    
    opts.on('-w [WEEKS_PREVIOUS]', '--week', 'The current week is the default') do |weeks_previous|
      if weeks_previous && weeks_previous.to_i == 0
        puts "Weeks previous must be a number greater than zero"
        exit 1
      else
        options[:week] = weeks_previous.to_i || 0
      end
    end
    
    opts.on('-m [MONTHS_PREVIOUS]', '--month', 'The current month is the default') do |months_previous|
      if months_previous && months_previous.to_i == 0
        puts "Months previous must be a number greater than zero"
        exit 1
      else
        options[:month] = months_previous.to_i || 0
      end
    end

    opts.on('-d DATE', '--date', 'Date must be of format YYYY/MM/DD') do |date|
      if date =~ /\d\d\d\d\/\d\d\/\d\d/
        options[:date] = date
      else
        puts "Invalid date format. Must be YYYY/MM/DD"
        exit 1
      end
    end

    opts.on('-r RANGE', '--range', 'Range must be of format YYYY/MM/DD:YYYY/MM/DD') do |range|
      if range =~ /\d\d\d\d\/\d\d\/\d\d:\d\d\d\d\/\d\d\/\d\d/
        options[:range] = range
      else
        puts "Invalid date range. Must be YYYY/MM/DD:YYYY/MM/DD"
        exit 1
      end
    end

    opts.on('-f SEARCH', '--filter') do |search|
      options[:filter] = search.split(',')
    end
  end  
  
  option_parser.parse!
  puts options.inspect
  puts ARGV.inspect
  
  tree = ActivityTree.new
  parser = FileParser.new(tree, options)
  parser.process_file(ARGV[0])

  if parser.valid?
    tree.process
    tree.print
  else
    STDERR.puts "ERRORS:"
    STDERR.puts parser.errors.join("\n")
  end
end
